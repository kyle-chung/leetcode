给定一个正整数 n ，输出外观数列的第 n 项。

「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。

你可以将其视作是由递归公式定义的数字字符串序列：

countAndSay(1) = "1"
countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。
前五项如下：

1.     1
2.     11
3.     21
4.     1211
5.     111221
第一项是数字 1 
描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 "11"
描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 "21"
描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 "1211"
描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 "111221"

要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。
然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。
要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。

# 双指针
我们可以通过下面双指针的做法，去逐项描述，求得第 n 项：

首先定义变量 pre 记录前一项，初始化为空字符串；定义变量 cur 记录当前项，初始化为 '1'（第一项为 1）；

定义双指针 start， end 均指向序列项的头部，这里用于统计元素出现的次数；

由于给定的 n ≥ 1，这里由第 2 项开始逐项对前一项进行描述
（注意，要将 cur 赋值给 pre，并初始化 cur 为空字符串，重新拼接得到当前项）：

1、从左往右遍历 pre，当元素相同时，移动 end 指针，直至元素不相同时。
   那么此时 end-start 就是相同元素的个数，而 start 指针指向的元素就是重复的元素。
   进行拼接，cur += str(end-start)+pre[start]。

2、此时要让 start 指向 end 所在的位置，开始记录下个元素出现的次数；

3、重复上面的步骤，直至 end 指针到达序列项尾部，便可得到当前项。

逐项对前面一项描述开始时，都应该重置 start、end 指针指向序列项头部
同时应将 cur 赋值给 pre，初始化 cur，也就是前面注意部分所说的内容（可结合代码理解）
然后，再次重复第三个步骤。

class Solution:
    def countAndSay(self, n: int) -> str:
        pre = ''
        cur = '1'

        # 从第 2 项开始
        for _ in range(1, n):
            # 这里注意要将 cur 赋值给 pre
            # 因为当前项，就是下一项的前一项。有点绕，尝试理解下
            pre = cur
            # 这里 cur 初始化为空，重新拼接
            cur = ''
            # 定义双指针 start，end
            start = 0
            end = 0
            # 开始遍历前一项，开始描述
            while end < len(pre):
                # 统计重复元素的次数，出现不同元素时，停止
                # 记录出现的次数，
                while end < len(pre) and pre[start] == pre[end]:
                    end += 1
                # 元素出现次数与元素进行拼接
                cur += str(end-start) + pre[start]
                # 这里更新 start，开始记录下一个元素
                start = end
        
        return cur






